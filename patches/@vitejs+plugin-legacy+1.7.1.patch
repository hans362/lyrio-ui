diff --git a/node_modules/@vitejs/plugin-legacy/index.d.ts b/node_modules/@vitejs/plugin-legacy/index.d.ts
index 8f340f1..0e63654 100644
--- a/node_modules/@vitejs/plugin-legacy/index.d.ts
+++ b/node_modules/@vitejs/plugin-legacy/index.d.ts
@@ -12,12 +12,20 @@ export interface Options {
   /**
    * default: true
    */
-  polyfills?: boolean | string[]
+  polyfills?: boolean | string[] | ((polyfill: string) => boolean)
   additionalLegacyPolyfills?: string[]
   /**
    * default: false
    */
-  modernPolyfills?: boolean | string[]
+  modernPolyfills?: boolean | string[] | ((polyfill: string) => boolean)
+  /**
+   * default: A browserslist with support for ES6 dynamic import
+   */
+  modernTargets?: string | string[] | { [key: string]: string }
+  /**
+   * default: "import('data:text/javascript,')"
+   */
+  modernFeatureTestCode?: string
   /**
    * default: true
    */
diff --git a/node_modules/@vitejs/plugin-legacy/index.js b/node_modules/@vitejs/plugin-legacy/index.js
index b66c471..27ef96a 100644
--- a/node_modules/@vitejs/plugin-legacy/index.js
+++ b/node_modules/@vitejs/plugin-legacy/index.js
@@ -3,6 +3,7 @@ const path = require('path')
 const { createHash } = require('crypto')
 const { build } = require('vite')
 const MagicString = require('magic-string').default
+const { browsersWithSupportForFeatures } = require('browserslist-generator')
 
 // lazy load babel since it's not used during dev
 let babel
@@ -18,9 +19,9 @@ const safari10NoModuleFix = `!function(){var e=document,t=e.createElement("scrip
 const legacyPolyfillId = 'vite-legacy-polyfill'
 const legacyEntryId = 'vite-legacy-entry'
 const systemJSInlineCode = `System.import(document.getElementById('${legacyEntryId}').getAttribute('data-src'))`
-const dynamicFallbackInlineCode = `!function(){try{new Function("m","return import(m)")}catch(o){console.warn("vite: loading legacy build because dynamic import is unsupported, syntax error above should be ignored");var e=document.getElementById("${legacyPolyfillId}"),n=document.createElement("script");n.src=e.src,n.onload=function(){${systemJSInlineCode}},document.body.appendChild(n)}}();`
-
-const forceDynamicImportUsage = `export function __vite_legacy_guard(){import('data:text/javascript,')};`
+const defaultModernFeatureTestCode = "import('data:text/javascript,')"
+const getFallbackInlineCode = (featureTestCode) => `!function(){try{new Function("",${JSON.stringify(featureTestCode)})()}catch(o){console.warn("vite: loading legacy build because required features are unsupported, errors above should be ignored");var e=document.getElementById("${legacyPolyfillId}"),n=document.createElement("script");n.src=e.src,n.onload=function(){${systemJSInlineCode}},document.body.appendChild(n)}}();`
+const getModernGatekeepingCode = (featureTestCode) => `export function __vite_legacy_guard(){${featureTestCode}};__vite_legacy_guard();`
 
 const legacyEnvVarMarker = `__VITE_IS_LEGACY__`
 
@@ -34,6 +35,8 @@ function viteLegacyPlugin(options = {}) {
    */
   let config
   const targets = options.targets || 'defaults'
+  const modernTargets = options.modernTargets || browsersWithSupportForFeatures('es6-module-dynamic-import')
+  const modernFeatureTestCode = options.modernFeatureTestCode || defaultModernFeatureTestCode
   const genLegacy = options.renderLegacyChunks !== false
   const genDynamicFallback = genLegacy
 
@@ -126,7 +129,7 @@ function viteLegacyPlugin(options = {}) {
           bundle,
           facadeToModernPolyfillMap,
           config.build,
-          options.externalSystemJS
+          true
         )
         return
       }
@@ -140,7 +143,7 @@ function viteLegacyPlugin(options = {}) {
         if (!legacyPolyfills.has('es.promise')) {
           // check if the target needs Promise polyfill because SystemJS relies
           // on it
-          detectPolyfills(`Promise.resolve()`, targets, legacyPolyfills)
+          detectPolyfills(`Promise.resolve()`, targets, legacyPolyfills, typeof options.polyfills === "function" && options.polyfills)
         }
 
         isDebug &&
@@ -243,13 +246,13 @@ function viteLegacyPlugin(options = {}) {
           !Array.isArray(options.modernPolyfills)
         ) {
           // analyze and record modern polyfills
-          detectPolyfills(raw, { esmodules: true }, modernPolyfills)
+          detectPolyfills(raw, modernTargets, modernPolyfills, typeof options.modernPolyfills === "function" && options.modernPolyfills)
         }
 
         const ms = new MagicString(raw)
 
         if (genDynamicFallback && chunk.isEntry) {
-          ms.prepend(forceDynamicImportUsage)
+          ms.prepend(getModernGatekeepingCode(modernFeatureTestCode))
         }
 
         if (raw.includes(legacyEnvVarMarker)) {
@@ -433,7 +436,7 @@ function viteLegacyPlugin(options = {}) {
         tags.push({
           tag: 'script',
           attrs: { type: 'module' },
-          children: dynamicFallbackInlineCode,
+          children: getFallbackInlineCode(modernFeatureTestCode),
           injectTo: 'head'
         })
       }
@@ -504,8 +507,9 @@ function viteLegacyPlugin(options = {}) {
  * @param {string} code
  * @param {any} targets
  * @param {Set<string>} list
+ * @param {(polyfill: string) => boolean} filter
  */
-function detectPolyfills(code, targets, list) {
+function detectPolyfills(code, targets, list, filter) {
   const { ast } = loadBabel().transform(code, {
     ast: true,
     babelrc: false,
@@ -514,7 +518,7 @@ function detectPolyfills(code, targets, list) {
       [
         'env',
         {
-          targets,
+          targets: targets,
           modules: false,
           useBuiltIns: 'usage',
           corejs: { version: 3, proposals: false },
@@ -531,6 +535,10 @@ function detectPolyfills(code, targets, list) {
         source.startsWith('core-js/') ||
         source.startsWith('regenerator-runtime/')
       ) {
+        if (filter && !filter(source)) {
+          continue;
+        }
+
         list.add(source)
       }
     }
@@ -550,7 +558,7 @@ async function buildPolyfillChunk(
   bundle,
   facadeToChunkMap,
   buildOptions,
-  externalSystemJS
+  excludeSystemJS
 ) {
   let { minify, assetsDir } = buildOptions
   minify = minify ? 'terser' : false
@@ -559,7 +567,7 @@ async function buildPolyfillChunk(
     root: __dirname,
     configFile: false,
     logLevel: 'error',
-    plugins: [polyfillsPlugin(imports, externalSystemJS)],
+    plugins: [polyfillsPlugin(imports, excludeSystemJS)],
     build: {
       write: false,
       target: false,
@@ -599,7 +607,7 @@ const polyfillId = '\0vite/legacy-polyfills'
  * @param {Set<string>} imports
  * @return {import('rollup').Plugin}
  */
-function polyfillsPlugin(imports, externalSystemJS) {
+function polyfillsPlugin(imports, excludeSystemJS) {
   return {
     name: 'vite:legacy-polyfills',
     resolveId(id) {
@@ -611,7 +619,7 @@ function polyfillsPlugin(imports, externalSystemJS) {
       if (id === polyfillId) {
         return (
           [...imports].map((i) => `import "${i}";`).join('') +
-          (externalSystemJS ? '' : `import "systemjs/dist/s.min.js";`)
+          (excludeSystemJS ? '' : `import "systemjs/dist/s.min.js";`)
         )
       }
     }
@@ -695,5 +703,5 @@ viteLegacyPlugin.default = viteLegacyPlugin
 viteLegacyPlugin.cspHashes = [
   createHash('sha256').update(safari10NoModuleFix).digest('base64'),
   createHash('sha256').update(systemJSInlineCode).digest('base64'),
-  createHash('sha256').update(dynamicFallbackInlineCode).digest('base64')
+  createHash('sha256').update(getFallbackInlineCode(defaultModernFeatureTestCode)).digest('base64')
 ]
