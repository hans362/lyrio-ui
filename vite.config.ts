import { defineConfig } from "vite";
import fs from "fs";
import path from "path";

// Vite plugins
import react from "@vitejs/plugin-react";
import compileTime from "vite-plugin-compile-time";
import legacy from "@vitejs/plugin-legacy";
import { ViteEjsPlugin as ejs } from "vite-plugin-ejs";
import { prismjsPlugin as prismjs } from "vite-plugin-prismjs";
import minifyHtml from "vite-plugin-html-minifier-terser";
import svgo from "./vite/svgo";
import publicPath from "vite-plugin-public-path";

// Node polyfill
import { NodeGlobalsPolyfillPlugin } from "@esbuild-plugins/node-globals-polyfill";
import { NodeModulesPolyfillPlugin } from "@esbuild-plugins/node-modules-polyfill";
import rollupNodePolyFill from "rollup-plugin-node-polyfills";

// Others
import getGitRepoInfo from "git-repo-info";
import { Options as HtmlMinifierOptions } from "html-minifier-terser";
import { browsersWithSupportForFeatures } from "browserslist-generator";

import tsconfig from "./tsconfig.json";

const tsconfigPathAliases = Object.fromEntries(
  Object.entries(tsconfig.compilerOptions.paths).map(([key, values]) => {
    let value = values[0];
    if (key.endsWith("/*")) {
      key = key.slice(0, -2);
      value = value.slice(0, -2);
    }

    const nodeModulesPrefix = "node_modules/";
    if (value.startsWith(nodeModulesPrefix)) {
      value = value.replace(nodeModulesPrefix, "");
    } else {
      value = path.join(__dirname, value);
    }

    return [key, value];
  })
);

const enabledNodePolyfills = {
  util: "rollup-plugin-node-polyfills/polyfills/util",
  path: "rollup-plugin-node-polyfills/polyfills/path",
  buffer: "rollup-plugin-node-polyfills/polyfills/buffer-es6"
};

export default defineConfig({
  plugins: [
    react({
      babel: {
        plugins: [["@babel/plugin-proposal-decorators", { legacy: true }], ["@babel/plugin-proposal-class-properties"]]
      }
    }),
    compileTime(),
    ejs({
      gitRepoInfo: getGitRepoInfo()
    }),
    svgo({
      plugins: [
        "preset-default",
        {
          name: "sortAttrs",
          params: {
            xmlnsOrder: "alphabetical"
          } as any
        }
      ]
    }),
    legacy({
      modernPolyfills: true,
      ignoreBrowserslistConfig: true,
      targets: [
        // Default
        ">0.2%",
        "not dead",
        "not op_mini all",

        // Don't support IE
        "not IE 11",

        // Windows XP
        "Firefox 52"
      ],
      modernTargets: browsersWithSupportForFeatures(
        "es6-module-dynamic-import",
        "javascript.builtins.Object.fromEntries"
      ),
      modernFeatureTestCode: "import('data:text/javascript,');Object.fromEntries([])"
    }),
    publicPath({
      publicPathExpression: "window.publicPath",
      html: {
        functionNameAddLinkTag: "addLinkTag",
        addLinkTagsPlaceholder: "// __add_link_tags__",
        functionNameAddScriptTag: "addScriptTag",
        addScriptTagsPlaceholder: "// __add_script_tags__"
      }
    }),
    minifyHtml(<HtmlMinifierOptions>{
      includeAutoGeneratedTags: true,
      removeAttributeQuotes: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      sortClassName: true,
      useShortDoctype: true,
      collapseWhitespace: true,
      removeComments: true,
      ignoreCustomComments: [/Menci/],
      minifyJS: {
        parse: {
          ecma: 8
        },
        compress: {
          ecma: 5,
          warnings: false,
          comparisons: false,
          inline: 2
        },
        mangle: {
          safari10: true
        },
        output: {
          ecma: 5,
          comments: false
        }
      },
      minifyCSS: true
    }),
    prismjs({
      languages: fs.readFileSync(".prism-languages", "utf-8").trim().split("\n")
    })
  ],
  base: process.env.NODE_ENV === "production" ? "/__vite_base__/" : "/",
  resolve: {
    alias: {
      ...enabledNodePolyfills,
      ...tsconfigPathAliases
    }
  },
  build: {
    rollupOptions: {
      plugins: [rollupNodePolyFill()]
    }
  },
  optimizeDeps: {
    esbuildOptions: {
      // Node.js global to browser globalThis
      define: {
        global: "globalThis"
      },
      // Enable esbuild polyfill plugins
      plugins: [NodeGlobalsPolyfillPlugin(), NodeModulesPolyfillPlugin()]
    }
  }
});
